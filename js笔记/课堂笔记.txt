JS
第一单元：初探js

JavaScript一种直译式脚本语言，是一种动态类型、弱类型、基于原型的语言，内置支持类型。它的解释器被称为JavaScript引擎，为浏览器的一部分，广泛用于客户端的脚本语言，最早是在HTML（标准通用标记语言下的一个应用）网页上使用，用来给HTML网页增加动态功能。

	js是嵌入式脚本语言。    .exe  

　　JavaScript是一种属于网络的脚本语言,已经被广泛用于Web应用开发,常用来为网页添加各式各样的动态功能,为用户提供更流畅美观的浏览效果。通常JavaScript脚本是通过嵌入在HTML中来实现自身的功能的。

优势：
　　1.是一种解释性脚本语言（代码不进行预编译）。
　　2.主要用来向HTML（标准通用标记语言下的一个应用）页面添加交互行为。
　　3.可以直接嵌入HTML页面，但写成单独的js文件有利于结构和行为的分离。
　　4.跨平台特性，在绝大多数浏览器的支持下，可以在多种平台下运行（如Windows、Linux、Mac、Android、iOS等）。

　　JavaScript 被数百万计的网页用来改进设计、验证表单、检测浏览器、创建cookies，以及更多的应用。
　　JavaScript 是因特网上最流行的脚本语言。
　　
	
1.JS的历史
	1> 1992 nombas  c--  ScriptEase  最早的客户端脚本语言.
	2> 1995 布兰登・艾奇（Brendan Eich）结合  网景(Netscape) livescript  ==>  Netscape Navigator 2.0浏览器 ==>  Sun（java之父）公司合作 ==>  JavaScript 
	3> 微软 IE 产品中 山寨了一个一模一样(JS)的 脚本语言, JScript     DHTML
	4> 1997 ECMA 欧洲计算机制造协会 ECMAScript标准(规范)
	我们今天的学习就是学习ECMAScript规范.


2.JS与HTML的集合方式
	1>在页面中书写script标签,在script标签中填入js代码.
	2>引入外部js文件.使用script标签,添加一个src属性,属性值指向外部js文件.
	
	注意: 1.script标签的书写位置可以是页面中任意位置.  放不同的位置,执行顺序也不相同.
		  2.如果script已经引入了外部js,那么在script标签体内就不要再书写js代码了.
				//可以另起一个<script>
1.>页面输出   页面输出换行 '<br/>'
2.>页面弹出	换行 '\n'
3.>控制台输出	换行  '\n'


第二单元  语法结构


3.JS中的变量：ECMAScript 的变量是松散类型的，所谓松散类型就是可以用来保存任何类型的数据。换句话说，
每个变量仅仅是一个用于保存值的占位符而已。定义变量时要使用 var 操作符（注意 var 是一个关键
字），后跟变量名（即一个标识符）
	
	JS : 原始数据类型
				number   包含整数和小数.
				string   " 或 ' 包裹都可以.
				boolean	 true或false
				undefined  undefined  通常是系统自动赋值. 当我们声明一个变量,并且没有为变量初始				化值时,系统会默认初始化为undefined.
				null     null 通常是手动赋值. 可以当做对象类型的占位符.
	引用数据类型：数组，object

4.JS中的基本语法
		1.	变量区分大小写
			a>可一次声明多个变量,并且变量不必具有相同的类型.例如:var test = "hi", age = 25;
			b>命名规范:
			?	第一个字符必须是字母、下划线（_）或美元符号（$）
			?	余下的字符可以是下划线、美元符号或任何字母或数字字符
			
			
		2.	变量是弱类型的
		3.	每行的分号可有可无.没有就按折行符的末尾作为结尾.
		4.	注释与java,c,php相同
		5.	使用{}来封装代码块

所谓标识符，就是指变量、函数、属性的名字，或者函数的参数。标识符可以是按照下列格式规则 组合起来的一或多个字符： 

第三单元  数据类型
基本数据类型：
1.string
2.number
3.boolean
4.undefined
5.null

引用数据类型：
object    

栈内存和堆内存的概念：
栈stack:是程序启动时候由程序留出的工作内存区  比如程序的局部变量,函数调用等都是从栈中获取,这个内存在需要的时候分配,不需要就释放。  
堆heap:是计算机空余的物理内存和硬盘空余空间的和.  但是它的获取不是自动的了,相比从栈中分配内存要慢些。
 使用栈就象我们去饭馆里吃饭，只管点菜（发出申请）、付钱、和吃（使用），吃饱了就走，
不必理会切菜、洗菜等准备工作和洗碗、刷锅等扫尾工作，他的好处是快捷，但是自由度小。  
使用堆就象是自己动手做喜欢吃的菜肴，比较麻烦，但是比较符合自己的口味，而且自由度大。


第四单元  数据类型相互转换


1.Number  把字符串转成数值型。语法：Number()
  NaN  not a number（不是一个数字） 例如：字符串-数字
  任何涉及NaN的操作（例如NaN/10）都会返回NaN。2、NaN与任何值都不相等，包括NaN本身。
  isNaN();  作用：检测是否是数值
  转成整型：parseInt（"需要转换的值","转换时使用的基数。进制"）  eg：24abc; 可以有两个参数
  转成浮点型：parseFloat();  eg:0123。 3.14159.26

2.String() 转成字符串  语法：String()  or  toString();

3.Boolean() 转成布尔型  语法：Boolean（n）  返回值：false|true  

以下几种情况都是false
Boolean(0) 
Boolean(null) 
Boolean(undefined) 
Boolean("")
Boolean(NaN)



第五单元  

表达式：由一个或多个操作数通过操作符组合而成的有意义的式子。

运算符：运算符(掌握)
	(1)就是把常量和变量连接的符号，一般参与运算使用。
	(2)分类：
		算术运算符
		赋值运算符
		关系运算符
		逻辑运算符
		位运算符
		三元运算符
	(3)算术运算符
		+,-,*,/,%,++,--

		+：正号，加法，字符串连接符。
			("5+5="+5+5);//5+5=55
			(5+5+"=5+5");//10=5+5

		%：取得余数
			左边如果大于右边，结果是余数。
			左边如果小于右边，结果是左边。
			左边如果等于右边，结果是0。

			正负号跟左边一致。

		++/--：
			++ 其实相当于把数据+1

			单独使用：
				在数据的前后，结果一致。
		
			参与操作使用：
				如果在数据的后边，数据先操作，在++/--
				如果在数据的前边，数据先++/--，在操作。
	(4)赋值运算符
		=,+=,-=,*=,/=,%=

		int a = 10;
			把10赋值给int类型的变量a。

		a += 20;
			把左边和右边的和赋值给左边。

		注意事项：
			a = a + 20;
			a += 20;
			结果是等价的，理解不是等价的。

			因为+=这种运算符，内含了强制类型转换功能。
			比如：
				short s = 2;

				s+=3;
				等价于
				s = (short)
	(5)关系运算符
		==,!=,>,>=,<,<=，===，!==

		特点：关系运算符的结果都是boolean类型。
		      请千万注意：== 不要写成 =
	(6)逻辑运算符（优先级！ &&  ||）


		逻辑与： &&( &&两边都成立才为true，有一边不成立就是false)
		

		alert（50 && 66）;
		alert(0 && 8);
		alert(20 && 12 && 30);
		alert(NaN && "abc");
		alert(undefined && "15");
		alert(null && 56);
		alert(8&& 15 && 0 && false);
		
		逻辑或：|| （只要有一边成立就是true）
		eg:短路，只要有一个成立就不往后面走。
		console.log( 0 || 2);
		console.log( 0 || false || "");
		console.log("abc" || 0);

		逻辑非： ！ 取反
		！88
		！false
		！true
		！NaN
		! null
		!! 33

		
		&,|,!,^,&&,||
		
		&:有false则false
		|:有true则true
		!:true变false,false变true
		^:相同false,不同true

		&&:有false则false
		||:有true则true

		&&和&的区别是：如果左边有false了，右边将不再执行。
		||和|的区别是：如果左边有true了，右边将不再执行。

		开发中常用：
			&&,||,!(s+3);
	（7）三元运算符
	语法：条件？代码1:代码2；

第七单元

	语句（一）
	判断语句：
	语法1：if(判断条件){ 执行代码块； }
	语法2：if(判断条件){执行代码块；}else{  执行代码块；}
	语法3：if(判断条件){}else if(){}...else{ 执行代码块；}

	switch (表达式){ 
	case 值1 : 语句1 break; 
	case 值2 : 语句2 break; 
	... 
	default : 语句n break; 
	} 

	switch(n)
{
case 1:
  执行代码块 1
  break;
case 2:
  执行代码块 2
  break;
default:
  n 与 case 1 和 case 2 不同时执行的代码
}

第八单元

语句（二）
for
1.需求将‘我爱js’输出5次。
2.将我爱js输出5000次。
3.将我们爱js输出5000次。
植物大战僵尸=>重复的发豌豆
针对这种重复的动作，js提供了循环语句：
for(初始条件;判断条件；控制条件){
循环体；
}

把1这个数字输出10次。
输出1-10的数字。
请输出100-200之间的数
请输出1-10的和
水仙花数

while
while循环格式：
		基本格式：
			while(判断条件)
			{
				循环体;
			}

	而我说循环有四个内容：
		循环语句：
		循环体:要做的事情。
		初始化条件:从哪里开始
		判断条件:在什么情况下结束
		控制条件:控制台初始化条件的变化

		改进版格式：
			初始化条件;
			while(判断条件)
			{
				循环体;
				控制条件;
			}

		看for的结果：
			for(初始化条件;判断条件;控制条件)
			{
				循环体;
			}

		while循环和for是可以等价转换的。
		区别：
			初始化条件的变量在for结束，以后是不能使用的。
			而while结束后是可以使用的。

			如果这个变量仅仅是控制次数的，建议使用for循环。
			因为这样，for结束，这个变量就结束，效率高。

		什么时候用for，什么时候用while?
			如果是控制范围，最好用for。
			如果范围不明确，用while。比如说：我吃小蜜橘，你们吃葡萄。

		注意：
		do...while循环和其他两种循环的区别是：
			do...while至少执行一次。
			其他的两种循环可能一次都不执行。

/*
	需求：我国最高山峰是珠穆朗玛峰，8848米。现在我有一张足够大的纸，它的厚度是0.01米。
		  请问，我折叠多少次，可以折成珠穆朗玛峰的高度。(思考题)

	思路：
		A:知道初始化条件是厚度0.01米，也就是1cm。
		  最终条件是8848m，也就是884800cm。
		  循环体的内容是厚度每次变为以前的2倍。
		  判断条件是厚度有没有超过最大值。
		B:定义一个统计变量，用于记录次数。
		  每当判断条件成立，我就++。
		  统计变量的初始化值是0。
		C:因为我不知道多少次，所以用while循环
*/

1-100之间的和用for和while等价转换。

for循环嵌套使用：
****
****
****

****将这个内容看成循环体。
外循环控制行，内循环控制列

for in


break
continue
return

第九单元


对象的三种创建方式
 在js中如何创建函数对象
	//1 简单创建方式
		function fun1(a,b){
			alert(a+b);
		};
		//fun1(1,2);//3
	//2
	var fun2 =  new Function("a","b","alert(a+b);");
	var fun3 =  new Function("a,b","alert(a+b);");
		//fun2(2,3);//5
		//fun3(3,4);//7
	//3 
	var fun4 = function(a,b){
			alert(a+b);
		};
		//fun4(5,5);//10
函数的调用：
	function fun1(a,b){
	alert(a+b);
		}
	//函数的调用只看函数名称，不看参数列表
	fun1(1,2);
	fun1(1,2,3);
	fun1();
函数的内置对象arguments:可以用来获得函数实际运行时的参数

	function fun1(){
	alert(arguments[0]);
		}
	fun1(1,2,3);
思考：js中存不存在重载？  所谓重载就是函数名相同，参数名不同，返回结果不同

	fun2(1,2); //3
	fun2(1,2,5);//10

关键字：return   
①返回值
②结束函数调用
③如果return未带值，将返回undefined

void()  拦截括号内代码的返回结果。
void（fun1(1,2)） //undefined


<a href="JavaScript:alert('aaa')">
</a>a href="JavaScript:fun1(1,2)"></a>
</a>a href="JavaScript:void(fun1(1,2))"></a>
</a>a href="JavaScript:void(0)"></a>


函数内部可以直接读取全局变量。 
　var n=999;

　　function f1(){
　　　　alert(n);
　　}

　　f1(); // 999
在函数外部自然无法读取函数内的局部变量。 
　function f1(){
　　　　var n=999;
　　}

　　alert(n); // error

这里有一个地方需要注意，函数内部声明变量的时候，一定要使用var命令。如果不用的话，你实际上声明了一个全局变量！ 
function f1(){
　　　　n=999;
　　}

　　f1();

　　alert(n); // 999


-----------------------------------------------------------------------
alert(fun1.toString());
alert(fun2.toString());
alert(fun4.toString());


第十单元
1.数组的创建：
var arr = new Array(3);
var brr = [4,5,6,7]

数组的一些方法：
push
unshift
shift
pop
splice
slice
reverse
用for循环实现数组反转

第十一单元
Math对象

ceil
floor
abs
max
min
random
round
定时器

案例：彩票

第十二单元  
Date对象
getFullYear
set

案例：倒计时

第十三单元
DOM:dom树
1.事件
a.onsubmit事件，阻止表单验证。直接return false
b.onload当页面（document）或图像（img）加载完成时。
c.onmouseover
d.onmouseout
e.onkeypress
f.onkeydown(开发中常用，第一时间触发)
g.onblur 失去焦点
h.onchange 内容被改变
i.onfocus 获取焦点
2.事件在开发中的应用

2.通过js修改css样式
案例：大中小字体

引入DHTML的概念=>Dynamic  Hypertext Markup Language=>整合了DOM HTML CSS js => 其实就是对原有DOM对象的增强=>
就是对原有DOM对象增加了一些属性和方法

让我们的开发更加简便快捷

拓展：事件的传播--阻止事件的传播  通过event对象（event对象通过一个侦探来讲）


第十四单元  BOM

location  

href



reload   刷新


assign   相当于href   加载一个新页面，留下历史记录
replace(newURL)       加载一个新页面，不会留下历史纪录


http：//超文本传输协议
https://   超文传输协议  加密   更安全  



	

				