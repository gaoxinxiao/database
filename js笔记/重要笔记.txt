    文档对象模型（DOM），提供访问和操作网页内容的方法和接口；
?  浏览器对象模型（BOM），提供与浏览器交互的方法和接口

逻辑与操作可以应用于任何类型的操作数，而不仅仅是布尔值。在有一个操作数不是布尔值的情况
下，逻辑与操作就不一定返回布尔值；此时，它遵循下列规则：

  如果第一个操作数是对象，则返回第二个操作数；
  如果第二个操作数是对象，则只有在第一个操作数的求值结果为 true 的情况下才会返回该
  对象；
  如果两个操作数都是对象，则返回第二个操作数；
  如果有一个操作数是 null ，则返回 null ；
  如果有一个操作数是 NaN ，则返回 NaN ；
  如果有一个操作数是 undefined ，则返回 undefined 。
  逻辑与操作属于短路操作，即如果第一个操作数能够决定结果，那么就不会再对第二个操作数求值。

与逻辑与操作相似，如果有一个操作数不是布尔值，逻辑或也不一定返回布尔值；此时，它遵循下
列规则：

  如果第一个操作数是对象，则返回第一个操作数；
  如果第一个操作数的求值结果为 false ，则返回第二个操作数；
  如果两个操作数都是对象，则返回第一个操作数；
  如果两个操作数都是 null ，则返回 null ；
  如果两个操作数都是 NaN ，则返回 NaN ；
  如果两个操作数都是 undefined ，则返回 undefined 。
    与逻辑与操作符相似，逻辑或操作符也是短路操作符。也就是说，如果第一个操作数的求值结果为
    true ，就不会对第二个操作数求值了。

在转换不同的数据类型时，相等和不相等操作符遵循下列基本规则：
?  如果有一个操作数是布尔值，则在比较相等性之前先将其转换为数值―― false 转换为 0，而
    true 转换为 1；
?  如果一个操作数是字符串，另一个操作数是数值，在比较相等性之前先将字符串转换为数值；
?  如果一个操作数是对象，另一个操作数不是，则调用对象的 valueOf() 方法，用得到的基本类
    型值按照前面的规则进行比较；
    这两个操作符在进行比较时则要遵循下列规则。
?  null 和 undefined 是相等的。
?  要比较相等性之前，不能将 null 和 undefined 转换成其他任何值。
?  如果有一个操作数是 NaN ，则相等操作符返回 false ，而不相等操作符返回 true 。重要提示：
    即使两个操作数都是 NaN ，相等操作符也返回 false ；因为按照规则， NaN 不等于 NaN 。
?  如果两个操作数都是对象，则比较它们是不是同一个对象。如果两个操作数都指向同一个对象，
    则相等操作符返回 true ；否则，返回 false 。



只有undefined == null 是true，它俩单独拿出来和任意值比较都是false；
NaN和任何值都不想等，包括他自己；

转boolean ‘’ false null undefined NaN 0 是false 其他是true；



另一种奇怪的现象发生在比较两个数字字符串的情况下，比如下面这个例子：
var result = "23" < "3"; //true
确实，当比较字符串 "23" 是否小于 "3" 时，结果居然是 true 。这是因为两个操作数都是字符串，
而字符串比较的是字符编码（ "2" 的字符编码是 50，而 "3" 的字符编码是 51）。不过，如果像下面例子
中一样，将一个操作数改为数值，比较的结果就正常了：
var result = "23" < 3; //false
此时，字符串 "23" 会被转换成数值 23，然后再与 3 进行比较，因此就会得到合理的结果。在比较
数值和字符串时，字符串都会被转换成数值，然后再以数值方式与另一个数值比较。当然，这个规则对
前面的例子是适用的。可是，如果那个字符串不能被转换成一个合理的数值呢？比如：
var result = "a" < 3; // false，因为"a"被转换成了 NaN
由于字母 "a" 不能转换成合理的数值，因此就被转换成了 NaN 。根据规则，任何操作数与 NaN 进行
关系比较，结果都是 false 。于是，就出现了下面这个有意思的现象：
var result1 = NaN < 3; //false
var result2 = NaN >= 3; //false
按照常理，如果一个值不小于另一个值，则一定是大于或等于那个值。然而，在与 NaN 进行比较时，
这两个比较操作的结果都返回了 false 。



ECMAScript 函数不能像传统意义上那样实现重载。而在其他语言（如 Java）中，可以为一个函数
编写两个定义，只要这两个定义的签名（接受的参数的类型和数量）不同即可。如前所述，ECMAScirpt
函数没有签名，因为其参数是由包含零或多个值的数组来表示的。而没有函数签名，真正的重载是不可
能做到的。
如果在 ECMAScript中定义了两个名字相同的函数，则该名字只属于后定义的函数。请看下面的例子：
function addSomeNumber(num){
return num + 100;
}
function addSomeNumber(num) {
return num + 200;
}
var result = addSomeNumber(100); //300
FunctionExample10.htm
在此，函数 addSomeNumber() 被定义了两次。第一个版本给参数加 100，而第二个版本给参数加
200。由于后定义的函数覆盖了先定义的函数，因此当在最后一行代码中调用这个函数时，返回的结果
就是 300。


     列出数组的常用方法，并说明其作用（不少于8个）（10分）

	    *indexOf(查找的值，从哪里开始); // 从前往后查找数组元素出现的下标
	    lastIndexOf(查找的值，从哪里开始往前查找)// 从后面往前查找返回数组的下标
	    push();// 往数组后面追加，返回值是数组的长度
	    unshift();// 往数组的前面追加，返回的值是数组的长度
	    reverse();// 数组的反转
	    sort();// 对数组的元素排序
	    slice(start,end) // 截取数组，返回的是截取的新数组
	    splice(从哪开始，删除几个，添加的元素....);//添加替换删除 
	    pop();  最后一个 // 删除数组中的最后一个，返回的值是删除的那个值
	    shift() 第一个 // 删除数组中的第一个，返回的值是删除的那个值
	    join(分隔符)  // 转字符串  默认以逗号分隔 
	    concat() // 连接两个或多个数组，并返回结果。 
	    valueOf() // 返回数组的原始值


     请写出字符串的10个方法以及返回值并解释

	// trim() 可以去除两边的空格
	// *indexOf() 检索字符串返回检索的位置
	// slice() substr() substring() 截取字符串并在新的字符串中返回被提取的部分
	// charAt() 返回指定位置的字符
	// charCodAt() 返回指定的位置的字符串所在位置的Unicode编码
	// concat() 拼接连接字符串，拼接完之后返回新的字符串
	// replace() 替换，替换完返回新的字符串
	// split() 字符串转数组
	// toLowerCase() 把字符串转换为小写
	// toUpperCase() 把字符串转换为大写
	// valueOf() 返回某个字符串的原始值
	// toString() 返回字符串




// for-in 语句是一种精准的迭代语句，可以用来枚举对象的属性。
		
		var student = {
			eat:'鱼',
			sleep:'bed',
			study:'js'
		}


		for(var i in student){
			console.log(student[i]);
		}


		console.log(typeof student);





?firstChild : 第一个子节点 在标准和ie9下会获取到空白文本节点。
?firstElementChild : 标准下获取第一个子元素节点，ie6/7/8不支持。
?lastChild : 最后一个子节点 在标准和ie9下会获取到空白文本节点。
?lastElementChild : 标准下获取最后一个子元素节点，ie6/7/8不支持。
  nextSibling：下一个兄弟节点 在标准和ie9下会获取到空白文本节点。
?nextElementSibling：标准下获取下一个兄弟节点，ie6/7/8不支持。
?previousSibling：上一个兄弟节点 在标准和ie9下会获取到空白文本节点。
?previousElementSibling：标准下获取上一个兄弟节点，ie6/7/8不支持。

  createElement : 创建一个dom节点。
  appendChild ： 往一个节点里面追加一个新的子节点。
  实例：留言板插入内容
?insertBefore ： 往一个子节点里面的某个子节点前面插入一个新的子节点。
  insertBefore(准备要插入的节点，插入到哪个节点的前面)
?实例：倒序留言板插入内容
  removeChild : 从一个节点里面删除掉某个指定的子节点。

  实例：删除留言

  replaceChild ： 用一个节点替换掉另一个节点里面的指定子节点。











